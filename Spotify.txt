## Spotify Data

For this question, you will want to use the data from Case Study 1.

**Getting the song list**

```{r}
songsList <- read.csv("song-list.csv")
```

To start you will show your understanding and exploration of the data and its features.

For every song on the you will have the following features:

- song title (track)
- artist
- peak (highest spot on the charts)
- date entered (when the song first appeared on the charts)
- successful (criteria to be predicted)

In addition, you will collect the audio features from Spotify:

- danceability
- energy
- key
- loudness
- mode
- speechiness
- acousticness
- instrumentalness
- liveness
- valence
- tempo
- duration_ms
- time_signature

**Getting the audio feautures data from spotify and merge it with the given song list**


**Q4. Features**

For each audio feature, make sure you understand what the features are, what are the possible values, etc. Read the Spotify API describing the audio features.


```{r}
# loading the dataset
songsList <- read.csv("song-list.csv")

# installing packages
installNewPackage("httr")
installNewPackage("jsonlite")
installNewPackage("httpuv")
# if("spotifyr"  %in% rownames(installed.packages()) == FALSE)
#         devtools::install_github('rweyant/spotifyr')

# loading the packages
library("httr")
library("jsonlite")
library("httpuv")
# library("spotifyr")


# ============================================================================


# Intialization of variables
clientKey <- '7065b7a80f43444796c73ef454903cdd'
clientSecret <- '5d65bc39a92349659e3a16634ef1680f'
userID <- '22uhyoyypkqsrhpmvjfchltva'
playlistID <- '6bkAwdiDi9lQG0IHISpwh0'
redirectURL <- 'http://localhost:1410/'


# ============================================================================


# Token
response <- POST('https://accounts.spotify.com/api/token',
                 accept_json(), authenticate(clientKey, clientSecret),
                 body = list(grant_type = 'client_credentials'),
                 encode = 'form', verbose())

mytoken <- content(response)$access_token
HeaderValue <- paste0('Bearer ', mytoken)

# oauth
spotifyEndpoint <- oauth_endpoint("spotify",
                                  "https://accounts.spotify.com/authorize",
                                  "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", clientKey, clientSecret)
options(httr_oob_default=FALSE)
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp, scope = "playlist-modify-public")


# ============================================================================


# Get the song SpotifyID based on title and Artist - Start
# Got 305 songs songs
songListIDs <- list()
songListName <- list()
failedSongListName <- list()
failedSongListNo <- list()
fullSongListIDs <- list()
for(i in 1:nrow(songsList)) {

        trackSearchURL <- URLencode(paste("https://api.spotify.com/v1/search/?q=",
                                          songsList$Title[i],
                                          "&type=track",
                                          sep = ""), reserved = FALSE, repeated = FALSE)
        getSong <- GET(url=trackSearchURL, add_headers(Authorization = HeaderValue))
        songInfo <- fromJSON(toJSON(content(getSong)))
        for(j in 1:length(songInfo$tracks$items$artists))  {
                if(songsList$Artist[i] %in% as.vector(unlist(songInfo$tracks$items$artists[j]))) {
                        songListName[length(songListName) + 1] <- songInfo$tracks$items$name[j]
                        songListIDs[length(songListIDs) + 1] <- songInfo$tracks$items$id[j]
                        fullSongListIDs[length(fullSongListIDs) + 1] <- songInfo$tracks$items$id[j]
                        break;
                }
                else {
                        failedSongListName[length(failedSongListName) + 1] <- songInfo$tracks$items$name[j]
                        fullSongListIDs[length(fullSongListIDs) + 1] <- NA
                        if(!is.null(unlist(songInfo$tracks$items$name[j]))){
                                failedSongListNo[length(failedSongListNo) + 1] <- i
                        }
                        break;
                }
        }
}
songsFound <- data.frame(unlist(songListName), unlist(songListIDs))
songsNotFound <- data.frame(unlist(failedSongListNo), unlist(failedSongListName))
colnames(songsFound) <- c("Name", "ID")
colnames(songsNotFound) <- c("No", "Name")

# Preparing the csv file for songs found and not found
write.csv(songsFound, file = "songs-found.csv")
write.csv(songsNotFound, file = "songs-not-found.csv")

# Get the song SPotifyID based on title and Artist - End


# ============================================================================


# Manupulating id column in songList Dataset - Start

assign("songsListDup", songsList)
songsListDup["id"] <- unlist(fullSongListIDs)

# I found the spotify ID for those songs which we where not able to get from the
# search (values in songs-not-found.csv), manually through spotify application.
#
# Created duplicate file of "songs-not-found.csv" as "songs-not-found-withid.csv"
# (attached along with the submission) and added a new column called Track.IDs
#
# From here moved the not found ids to the song list duplicate dataframe based
# on the position on the list

songsNotFoundList <- read.csv("songs-not-found-withid.csv")
songsNotFoundList <-  na.omit(songsNotFoundList)
songsNotFoundList$Track.ID
songsNotFoundList$No
for(i in 1:nrow(songsNotFoundList)) {
        songsListDup$id[songsNotFoundList$No[i]] <- as.character(paste(songsNotFoundList$Track.ID[i]))
}

spotifyTrackConstant <- 'spotify:track:'
songuri <- list()
songuri[1] <- paste(spotifyTrackConstant, songsNotFoundList$Track.ID[1], sep="")
for(i in 2:nrow(songsNotFoundList)) {
        songuri <- paste(songuri, ',', spotifyTrackConstant, songsNotFoundList$Track.ID[i], sep = "")
}

# Manupulating id column in songList Dataset - End


# ============================================================================


# forming spotify URL - Start

# songuri has for 305 songs
# split it before passing to api

spotifyTrackConstant <- 'spotify:track:'
songuri[1] <- paste(spotifyTrackConstant, songsFound$ID[1], sep="")
for(i in 2:nrow(songsFound)) {
       songuri <- paste(songuri, ',', spotifyTrackConstant, songsFound$ID[i], sep = "")
}

# forming spotify URL - End


# ============================================================================


# Adding Song to playlist - Start

# I did not use this because I found the api example using curl which 
# allows to add thee playlist through the developer interface
# 
# Just included inorder to so this also I have done !!
        
# songuri <- 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M'
# addTrackURL <- URLencode(paste('https://api.spotify.com/v1/users/',
#                      userID,'/playlists/',playlistID,'/tracks?uris=',
#                      songuri,
#                      sep=''))
# responseAddTrack <- POST(addTrackURL, add_headers(Authorization = paste('Bearer', spotifyToken$credentials$access_token, sep = " "),
#                                      Accept = 'application/json'))
# info <- fromJSON(toJSON(content(responseAddTrack)))

# Adding Song to playlist - Start


# ============================================================================


# Getting tracks from playlist - Start


flag <- TRUE
loop <- 0
i <- 0
fullTrackIDs <- list()
track_str <- list()
audioFeatures <- data.frame()
while(flag) {
        i <- i + 1
        playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
                                   userID,
                                   "/playlists/",
                                   playlistID,
                                   "/tracks/?offset=",
                                   loop,
                                   sep="")
        getTracks <- GET(url=playlistTracksURL, add_headers(Authorization = HeaderValue))
        info <- fromJSON(toJSON(content(getTracks)))
        fullTrackIDs[[i]] <- unlist(info$items$track$id)
        track_str[[i]] <- fullTrackIDs[[i]][1]
        for (j in 2:length(fullTrackIDs[[i]])) {
                track_str[[i]] <- paste(track_str[[i]], fullTrackIDs[[i]][j], sep=",")
        }
        trackFeaturesURL <- paste("https://api.spotify.com/v1/audio-features/?ids=",
                                  track_str[[i]],
                                  sep="")
        getSongFeautures <- GET(url=trackFeaturesURL, add_headers(Authorization = HeaderValue))
        songFeauturesInfo <- fromJSON(toJSON(content(getSongFeautures)))
        audioFeatures <- rbind.data.frame(audioFeatures, songFeauturesInfo$audio_features)
        if(length(unlist(info$items$track$id)) != 100) {
                break;
        }
        loop <- loop + 100
}

# Getting tracks from playlist - End

# ============================================================================

# Merge two Songlist and audio features by id column - Start

songsListDup <- as.data.frame(lapply(songsListDup, unlist))
df <- merge(songsListDup, audioFeatures, "id", all = TRUE)

str(head(df))
# Merge two Songlist and audio features by id column - End

```


**Missing Data**

Are any of the songs not available in Spotify? If so this is an easy example of what to do with missing data, because the entire row will be deleted from the data set.

```{r}
df <- na.omit(df) # Missing data
df <- data.frame(lapply(df, as.character), stringsAsFactors=FALSE)
str(head(df))
write.csv(df, file = "df.csv")
```

Missing data are identified and removed from the dataset using 'na.omit()' and final dataset is transformed to a csv file 'df.csv'. Attached with the assignment submission.

**Feature Types**

Describe which features are categorical? which are numeric?

**Numeric features**

        * Danceability
        * Energy
        * Acousticness
        * Valence
        * Tempo
        * Instrumentalness
        * Speechiness
        * Loudness
        * Liveness
        * Peak 
        * Duration        

**Categorical feautures**

        * Succesful
        * Mode
        * key
        * Time signature

**Numeric Data**

For each of the numeric features:

- Generate a histogram. Try at least two different values for the number of bins?

```{r}
histogramWithBins <- function(colValues, main, binsize){
        hist(as.numeric(colValues), main = main, xlab=paste0(main), breaks = binsize, col = 'red')
}

par(mfrow=c(1,2))

histogramWithBins(df$danceability, "Danceability", 8)
histogramWithBins(df$danceability, "Danceability", 16)

histogramWithBins(df$energy, "Energy", 8)
histogramWithBins(df$energy, "Energy", 16)

histogramWithBins(df$acousticness, "Acousticness", 8)
histogramWithBins(df$acousticness, "Acousticness", 16)

histogramWithBins(df$valence, "Valence", 8)
histogramWithBins(df$valence, "Valence", 16)

histogramWithBins(df$tempo, "Tempo", 8)
histogramWithBins(df$tempo, "Tempo", 16)

histogramWithBins(df$instrumentalness, "Instrumentalness", 8)
histogramWithBins(df$instrumentalness, "Instrumentalness", 16)

histogramWithBins(df$speechiness, "Speechiness", 8)
histogramWithBins(df$speechiness, "Speechiness", 16)

histogramWithBins(df$loudness, "Loudness", 8)
histogramWithBins(df$loudness,"Loudness", 16)

histogramWithBins(df$liveness, "Liveness", 8)
histogramWithBins(df$liveness, "Liveness", 16)

histogramWithBins(df$Peak, "Peak", 8)
histogramWithBins(df$Peak, "Peak", 16)

histogramWithBins(df$duration_ms, "Duration", 8)
histogramWithBins(df$duration_ms, "Duration", 16)
```

- Generate two histograms in the same figure (stacked side-by-side or one on top of another). In one histogram show the feature values for the successful songs, in the other histogram show the feature values for the unsuccessful songs.

```{r}
installNewPackage("ggplot2")
installNewPackage("reshape")
library("ggplot2", lib.loc="~/R/win-library/3.3")
library("reshape", lib.loc="~/R/win-library/3.3")

success = as.factor(df$Successful)
histogramSuccessfulness <- function(colValues, colname, binwidth) {
        ggplot(melt(as.numeric(colValues)), aes(x=as.numeric(colValues), fill= success)) +
                geom_histogram(position="stack", binwidth = binwidth) +
                labs(title = paste("Song Successfulness - ", colname, sep = "")) +
                xlab(colname)
}

par(mfrow=c(1,2))

histogramSuccessfulness(df$danceability, "Danceability", .05)

histogramSuccessfulness(df$energy, "Energy", .05)

histogramSuccessfulness(df$acousticness, "Acousticness", .05)

histogramSuccessfulness(df$valence, "Valence", .05)

histogramSuccessfulness(df$tempo, "Tempo", .05)

histogramSuccessfulness(df$instrumentalness, "Instrumentalness", .05)

histogramSuccessfulness(df$speechiness, "Speechiness", .05)

histogramSuccessfulness(df$loudness, "Loudness", .25)

histogramSuccessfulness(df$liveness, "Liveness", .05)

histogramSuccessfulness(df$Peak, "Peak", 1)
```


- Generate a figure with 2 boxplots side-by-side (or stacked on top of another), with the two boxplots corresponding to the songs from the two classes (successfulness).

```{r}
boxplotSuccessfulness <- function(colValues, ylabel){
        boxplot(as.numeric(colValues) ~ df$Successful, 
                main=paste('Boxplot of ', ylabel, sep = ""), col = c(13,14),
                xlab = 'Successfulness', ylab = ylabel)
}

par(mfrow=c(1,2))

boxplotSuccessfulness(df$danceability, "Danceability")

boxplotSuccessfulness(df$energy, "Energy")

boxplotSuccessfulness(df$acousticness, "Acousticness")

boxplotSuccessfulness(df$valence, "Valence")

boxplotSuccessfulness(df$tempo, "Tempo")

boxplotSuccessfulness(df$instrumentalness, "Instrumentalness")

boxplotSuccessfulness(df$speechiness, "Speechiness")

boxplotSuccessfulness(df$loudness, "Loudness")

boxplotSuccessfulness(df$liveness, "Liveness")

boxplotSuccessfulness(df$Peak, "Peak")
```

Then, summarize what if anything the plots have revealed about the data.

**Categorical Data**

For each of the categorical features:

- Generate a bar plot, showing the number of unique values.

```{r}
barplotUniqueValues <- function(colValues, xlabel){
        barplot(table(as.character(colValues)), main = paste(xlabel, "Barplot", sep = " "),
                xlab = xlabel, ylab = "counts", col = "red")
}

par(mfrow=c(1,2))

barplotUniqueValues(df$Successful, "Successfulness")

barplotUniqueValues(df$mode, "Mode")

barplotUniqueValues(df$key, "Key")

barplotUniqueValues(df$time_signature, "Time signature")
```


- Generate two bar plots in a single figure (stacked or side by side), with the two bar plots corresponding to the songs from the two classes.
Then, summarize what if anything the plots have revealed about the data.

```{r}
installNewPackage("ggplot2")
installNewPackage("reshape")
library("ggplot2", lib.loc="~/R/win-library/3.3")
library("reshape", lib.loc="~/R/win-library/3.3")

success = as.factor(df$Successful)

barplotSuccessfulness <- function(colValues, xlabel) {
        ggplot(melt(as.character(colValues)), aes(x=as.character(colValues), fill = success)) +
                geom_bar(position = "stack") + xlab(xlabel) +
                labs(title = paste("Barplot of",  xlabel, "with respect to Successfulness"))
}

par(mfrow=c(1,2))

barplotSuccessfulness(df$Successful, "Successfulness")
```

This graph shows the count of successful and unsucessful songs.

```{r}
barplotSuccessfulness(df$mode, "Mode")
```

The percentage of sucessfullness is more with major modality songs compared to minor modality songs.

```{r}
barplotSuccessfulness(df$key, "Key")
```

This does not reveal much about the data.

```{r}
barplotSuccessfulness(df$time_signature, "Time signature")
```

The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). And in this specified datasets most of the songs have 4 time signature.
**Pairwise Analysis**

For the numeric variables, explore whether there are any pairwise relationships. Report the results with a figure and a description of what if any relationships are revealed.

```{r}
pairwise <- function(colValues1, colValues2, label1, label2) {
        pairs(cbind(as.numeric(colValues1), as.numeric(colValues2)), 
              labels = c(label1, label2),
              main = paste(label1, label2, sep = " VS "), pch = 15, col = "red")
}
pairwise(df$speechiness, df$acousticness, "Speechiness", "Acousticness")
```

The pairwise analysis between speechiness and acousticness has strong correlation and they are left skewed reveals that most of the songs falls in the range of 0 to 0.3

```{r}
pairwise(df$tempo, df$danceability, "Tempo", "Danceability")
```

The pairwise analysis between Tempo and Danceability has weak correlation and both of them looks like inverse of one another. 

```{r}
pairwise(df$Peak, df$duration_ms, "Peak", "Duration")
```

The pairwise analysis between Tempo and Danceability has a similar patterned correlation which can observe that from the plot 

## End of assignment